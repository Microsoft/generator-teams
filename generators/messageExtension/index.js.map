{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/Yotilities.ts","webpack:///./src/messageExtension/MessageExtensionGenerator.ts","webpack:///./src/messageExtension/index.ts","webpack:///external \"chalk\"","webpack:///external \"dotenv\"","webpack:///external \"guid\"","webpack:///external \"lodash\"","webpack:///external \"path\"","webpack:///external \"ts-simple-ast\"","webpack:///external \"typescript\"","webpack:///external \"yeoman-generator\"","webpack:///external \"yosay\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,WAAW,mBAAO,CAAC,8BAAY;AAC/B,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,QAAQ;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,QAAQ;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0CAAkB;AAC5C,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,cAAc,mBAAO,CAAC,oBAAO;AAC7B,qBAAqB,mBAAO,CAAC,oDAAqB;AAClD,wBAAwB,mBAAO,CAAC,oCAAe;AAC/C,aAAa,mBAAO,CAAC,kBAAM;AAC3B,aAAa,mBAAO,CAAC,kBAAM;AAC3B,YAAY,mBAAO,CAAC,oBAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D,kFAAkF,KAAK;AACvF;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iDAAiD,6BAA6B;AAC9E,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,wCAAwC,mBAAO,CAAC,sBAAQ;AACxD,qDAAqD,uBAAuB,EAAE,SAAS;AACvF,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,qBAAqB,wBAAwB,qBAAqB,2BAA2B,qBAAqB;AAC/J;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,kCAAkC,wCAAwC,kCAAkC;AAChN;AACA,kCAAkC,uBAAuB;AACzD;AACA,4BAA4B,oCAAoC;AAChE,sDAAsD,oCAAoC;AAC1F;AACA;AACA;AACA;AACA,iEAAiE,qBAAqB,8BAA8B,qBAAqB;AACzI;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6DAA6D,oBAAoB,EAAE;AACnF,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,kCAAkC;AACnE;AACA,qDAAqD,kCAAkC;AACvF,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC,kCAAkC;AAC1E,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF,yBAAyB;AACzB;AACA;AACA,sGAAsG;AACtG,mCAAmC,kCAAkC,SAAS,kCAAkC,oBAAoB;AACpI;AACA;AACA;AACA,oEAAoE;AACpE,oCAAoC,kCAAkC,SAAS,kCAAkC;AACjH;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzUa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,oCAAoC,mBAAO,CAAC,wFAA6B;AACzE;;;;;;;;;;;;;;;;;;;;;;;;ACNA,kC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,kC","file":"messageExtension/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\"use strict\";\r\n// Copyright (c) Wictor WilÃ©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ts = require(\"typescript\");\r\nlet path = require('path');\r\nconst packagePath = \"package.json\";\r\n/**\r\n * Utility class for the Generator\r\n */\r\nclass Yotilities {\r\n    /**\r\n     * Validates a URL\r\n     * @param url Url to validate\r\n     */\r\n    static validateUrl(url) {\r\n        return /(https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/.test(url);\r\n    }\r\n    /**\r\n     * Renames a file based on passed options\r\n     * @param filename path and name to file\r\n     * @param options object with replacement properties\r\n     */\r\n    static fixFileNames(filename, options) {\r\n        if (filename !== undefined) {\r\n            var basename = path.basename(filename);\r\n            if (basename[0] === '_') {\r\n                var filename = '.' + basename.substr(1);\r\n                var dirname = path.dirname(filename);\r\n                filename = path.join(dirname, filename);\r\n            }\r\n            for (var prop in options) {\r\n                if (options.hasOwnProperty(prop) && typeof options[prop] === 'string') {\r\n                    filename = filename.replace(new RegExp(\"{\" + prop + \"}\", 'g'), options[prop]);\r\n                }\r\n            }\r\n        }\r\n        return filename;\r\n    }\r\n    static addAdditionalDeps(dependencies, fs) {\r\n        var pkg = fs.readJSON(packagePath);\r\n        dependencies.forEach(dep => {\r\n            pkg.dependencies[dep[0]] = dep[1];\r\n        });\r\n        fs.writeJSON(packagePath, pkg);\r\n    }\r\n    static insertTsExportDeclaration(fileName, literal, comment, fs) {\r\n        let clientTs = fs.read(fileName);\r\n        const src = ts.createSourceFile(fileName, clientTs, ts.ScriptTarget.ES5, true, ts.ScriptKind.TS);\r\n        const exp = ts.createExportDeclaration(undefined, undefined, undefined, ts.createLiteral(literal));\r\n        if (comment !== undefined) {\r\n            const cmt = ts.addSyntheticLeadingComment(exp, ts.SyntaxKind.SingleLineCommentTrivia, ` ${comment}`);\r\n        }\r\n        const update = ts.updateSourceFileNode(src, [\r\n            ...src.statements,\r\n            exp\r\n        ]);\r\n        const printer = ts.createPrinter({\r\n            newLine: ts.NewLineKind.LineFeed,\r\n            removeComments: false,\r\n        });\r\n        fs.write(fileName, printer.printFile(update));\r\n    }\r\n    static insertImportDeclaration(fileName, identifier, literal, comment, fs) {\r\n        let clientTs = fs.read(fileName);\r\n        const src = ts.createSourceFile(fileName, clientTs, ts.ScriptTarget.ES5, true, ts.ScriptKind.TS);\r\n        const imp = ts.createImportDeclaration(undefined, undefined, ts.createImportClause(ts.createIdentifier(identifier), undefined), ts.createLiteral(literal));\r\n        if (comment !== undefined) {\r\n            const cmt = ts.addSyntheticLeadingComment(imp, ts.SyntaxKind.SingleLineCommentTrivia, ` ${comment}`);\r\n        }\r\n        const update = ts.updateSourceFileNode(src, [\r\n            imp,\r\n            ...src.statements\r\n        ]);\r\n        const printer = ts.createPrinter({\r\n            newLine: ts.NewLineKind.LineFeed,\r\n            removeComments: false,\r\n        });\r\n        fs.write(fileName, printer.printFile(update));\r\n    }\r\n}\r\nexports.Yotilities = Yotilities;\r\n","\"use strict\";\r\n// Copyright (c) Wictor WilÃ©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Generator = require(\"yeoman-generator\");\r\nconst lodash = require(\"lodash\");\r\nconst chalk = require(\"chalk\");\r\nconst Yotilities_1 = require(\"./../app/Yotilities\");\r\nconst ts_simple_ast_1 = require(\"ts-simple-ast\");\r\nconst path = require(\"path\");\r\nconst Guid = require(\"guid\");\r\nlet yosay = require('yosay');\r\nclass MessageExtensionGenerator extends Generator {\r\n    constructor(args, opts) {\r\n        super(args, opts);\r\n        opts.force = true;\r\n        this.options = opts.options;\r\n        this.desc('Adds a Message Extension to a Microsoft Teams Apps project');\r\n    }\r\n    prompting() {\r\n        if (this.options.messageExtension) {\r\n            return this.prompt([\r\n                {\r\n                    type: 'list',\r\n                    name: 'messageExtensionType',\r\n                    message: 'What type of Message Extension would you like to create ',\r\n                    default: (answers) => {\r\n                        if (this.options.botType == 'botframework') {\r\n                            return 'existing';\r\n                        }\r\n                        else {\r\n                            return 'new';\r\n                        }\r\n                    },\r\n                    choices: answers => {\r\n                        var choices = [];\r\n                        choices.push({\r\n                            name: 'For a Bot hosted somewhere else',\r\n                            value: 'external'\r\n                        });\r\n                        if (this.options.botType == 'botframework' || this.options.existingManifest && this.options.existingManifest.bots && this.options.existingManifest.bots.length > 0) {\r\n                            choices.push({\r\n                                name: 'For a Bot already created in this project',\r\n                                value: 'existing'\r\n                            });\r\n                        }\r\n                        else {\r\n                            choices.push({\r\n                                name: 'For a new Bot',\r\n                                value: 'new'\r\n                            });\r\n                        }\r\n                        return choices;\r\n                    }\r\n                },\r\n                {\r\n                    // this is when we are running on an already existin project\r\n                    type: 'list',\r\n                    name: 'botId',\r\n                    message: 'Choose which bot',\r\n                    choices: answers => {\r\n                        let choices = [];\r\n                        if (this.options.existingManifest.bots) {\r\n                            // TODO: use AST to find the Bot classes as well\r\n                            choices = this.options.existingManifest.bots.map((b) => {\r\n                                return b.botId;\r\n                            });\r\n                        }\r\n                        if (this.options.bot) {\r\n                            choices.push(this.options.botid);\r\n                        }\r\n                        return choices;\r\n                    },\r\n                    when: (answers) => {\r\n                        return answers.messageExtensionType == 'existing' && this.options.existingManifest !== undefined;\r\n                    }\r\n                },\r\n                {\r\n                    type: 'input',\r\n                    name: 'messageExtensionId',\r\n                    message: (answers) => {\r\n                        var message = 'I need the Microsoft App ID for the Bot used by the Message Extension. ';\r\n                        return message;\r\n                    },\r\n                    default: (answers) => {\r\n                        return Guid.EMPTY;\r\n                    },\r\n                    validate: (input) => {\r\n                        return Guid.isGuid(input);\r\n                    },\r\n                    when: (answers) => {\r\n                        return answers.messageExtensionType !== 'existing';\r\n                    },\r\n                },\r\n                {\r\n                    type: 'input',\r\n                    name: 'messageExtensionName',\r\n                    message: 'What is the name of your Message Extension command?',\r\n                    default: this.options.title + ' Message Extension',\r\n                    validate: (input, answers) => {\r\n                        if (answers && answers.messageExtensionType !== 'external') {\r\n                            let name = lodash.camelCase(input);\r\n                            if (!name.endsWith(`MessageExtension`)) {\r\n                                name += `MessageExtension`;\r\n                            }\r\n                            if (this.fs.exists(`src/app/${name}.ts`)) {\r\n                                return `There's already a file with the name of ${name}.ts`;\r\n                            }\r\n                        }\r\n                        return input.length > 0;\r\n                    },\r\n                },\r\n                {\r\n                    type: 'input',\r\n                    name: 'messageExtensionDescription',\r\n                    message: 'Describe your Message Extension command?',\r\n                    default: (answers) => {\r\n                        return `Description of ${answers.messageExtensionName}`;\r\n                    },\r\n                    validate: (input) => {\r\n                        return input.length > 0;\r\n                    }\r\n                }\r\n            ]).then((answers) => {\r\n                this.options.messageExtensionId = answers.messageExtensionId;\r\n                this.options.messageExtensionType = answers.messageExtensionType;\r\n                this.options.messageExtensionTitle = answers.messageExtensionName;\r\n                this.options.messageExtensionDescription = answers.messageExtensionDescription;\r\n                this.options.messageExtensionName = lodash.camelCase(answers.messageExtensionName);\r\n                if (!this.options.messageExtensionName.endsWith(`MessageExtension`)) {\r\n                    this.options.messageExtensionName += `MessageExtension`;\r\n                }\r\n                this.options.messageExtensionClassName = this.options.messageExtensionName.charAt(0).toUpperCase() + this.options.messageExtensionName.slice(1);\r\n                if (answers.messageExtensionType == 'new') {\r\n                    // we need to add the Bot, even though the users did not choose to create one\r\n                    this.options.bot = true;\r\n                    this.options.botid = answers.messageExtensionId;\r\n                    this.options.botType = 'botframework';\r\n                    this.options.botTitle = answers.messageExtensionName + ' Bot';\r\n                    this.options.botName = lodash.camelCase(this.options.botTitle); // TODO: check valid file name here\r\n                    this.options.botClassName = this.options.botName.charAt(0).toUpperCase() + this.options.botName.slice(1);\r\n                }\r\n                else if (answers.messageExtensionType == 'existing') {\r\n                    // reuse the bot id\r\n                    if (this.options.existingManifest) {\r\n                        this.options.messageExtensionId = answers.botId;\r\n                        // if we already have a project, let's find the bot implementation class\r\n                        const project = new ts_simple_ast_1.default();\r\n                        project.addExistingSourceFiles(`${this.destinationRoot()}/src/app/*.ts`);\r\n                        const botClasses = project.getSourceFiles().map(s => {\r\n                            return s.getClasses().map(c => {\r\n                                const dec = c.getDecorator('BotDeclaration');\r\n                                if (dec) {\r\n                                    // arg 2 is the id\r\n                                    const idarg = dec.getArguments()[1];\r\n                                    const idargval = idarg.getText();\r\n                                    if (Guid.isGuid(idargval)) {\r\n                                        return { c: c, id: idargval };\r\n                                    }\r\n                                    else {\r\n                                        // load local environment variable\r\n                                        require('dotenv').config({\r\n                                            path: `${this.destinationRoot()}${path.sep}.env`\r\n                                        });\r\n                                        const calcval = eval(idargval);\r\n                                        if (!Guid.isGuid(calcval)) {\r\n                                            this.log(chalk.default.red('Unable to continue, as I cannot correlate the Bot Id and the TypeScript class'));\r\n                                            this.log(chalk.default.red('Please verify that you have a valid Guid or a valid environment variable in your BotDeclaration.'));\r\n                                            process.exit(1);\r\n                                        }\r\n                                        return { c: c, id: calcval };\r\n                                    }\r\n                                }\r\n                            }).filter(x => {\r\n                                return x !== undefined;\r\n                            });\r\n                        });\r\n                        const botClass = lodash.flatten(botClasses).find(c => {\r\n                            return c !== undefined && c.id == answers.botId;\r\n                        });\r\n                        if (botClass) {\r\n                            this.options.botName = botClass.c.getName();\r\n                        }\r\n                        else {\r\n                            this.log(chalk.default.red('Unable to continue, as I could not locate the Bot implementation'));\r\n                            this.log(chalk.default.red('Please verify that you have a valid Guid or a valid environment variable in your BotDeclaration.'));\r\n                            process.exit(1);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // we're adding a bot AND an extension\r\n                        this.options.messageExtensionId = this.options.botid;\r\n                    }\r\n                }\r\n                this.options.reactComponents = true;\r\n            });\r\n        }\r\n    }\r\n    writing() {\r\n        if (this.options.messageExtension) {\r\n            let manifestPath = \"src/manifest/manifest.json\";\r\n            var manifest = this.fs.readJSON(manifestPath);\r\n            if (!manifest.composeExtensions) {\r\n                manifest.composeExtensions = [];\r\n            }\r\n            manifest.composeExtensions.push({\r\n                botId: this.options.messageExtensionId,\r\n                canUpdateConfiguration: true,\r\n                commands: [\r\n                    {\r\n                        id: this.options.messageExtensionName,\r\n                        title: this.options.messageExtensionTitle,\r\n                        description: 'Add a clever description here',\r\n                        initialRun: true,\r\n                        parameters: [\r\n                            {\r\n                                name: 'parameter',\r\n                                description: 'Description of the parameter',\r\n                                title: 'Parameter'\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            });\r\n            this.fs.writeJSON(manifestPath, manifest);\r\n            // Externally hosted bots does not have an implementation\r\n            if (this.options.messageExtensionType !== \"external\") {\r\n                let templateFiles = [];\r\n                templateFiles.push(\"src/app/{messageExtensionName}.ts\", \"src/app/scripts/{messageExtensionName}Config.tsx\", \"src/app/web/{messageExtensionName}Config.html\");\r\n                templateFiles.forEach(t => {\r\n                    this.fs.copyTpl(this.templatePath(t), Yotilities_1.Yotilities.fixFileNames(t, this.options), this.options);\r\n                });\r\n                Yotilities_1.Yotilities.addAdditionalDeps([\r\n                    [\"msteams-ui-components-react\", \"^0.7.3\"],\r\n                    [\"react\", \"^16.1.0\"],\r\n                    [\"@types/react\", \"16.4.7\"],\r\n                    [\"react-dom\", \"^16.2.0\"],\r\n                    [\"file-loader\", \"1.1.11\"],\r\n                    [\"typestyle\", \"1.5.1\"]\r\n                ], this.fs);\r\n                Yotilities_1.Yotilities.insertTsExportDeclaration(\"src/app/scripts/client.ts\", `./${this.options.messageExtensionName}Config`, `Automatically added for the ${this.options.messageExtensionName} message extension`, this.fs);\r\n                // Yotilities.insertImportDeclaration(\r\n                //     `src/app/${ this.options.botName }.ts`,\r\n                //     this.options.messageExtensionName,\r\n                //     `./${ this.options.messageExtensionName }`,\r\n                //     `Automatically added for the ${ this.options.messageExtensionName } message extension`,\r\n                //     this.fs\r\n                // );\r\n                // Dynamically insert the reference and hook it up to the Bot\r\n                const project = new ts_simple_ast_1.default();\r\n                const file = project.createSourceFile(`src/app/${this.options.botName}.ts`, this.fs.read(`src/app/${this.options.botName}.ts`), {\r\n                    overwrite: true\r\n                });\r\n                const classes = file.getClasses();\r\n                const cl = classes.find(x => {\r\n                    return x.getDecorator('BotDeclaration') != undefined;\r\n                });\r\n                // insert the import statement\r\n                const imports = file.getImportDeclarations();\r\n                const lastImport = imports.length > 0 ? imports[imports.length - 1] : undefined;\r\n                const pos = lastImport !== undefined ? lastImport.getChildIndex() : 0;\r\n                const importDecl = file.insertImportDeclaration(pos, {\r\n                    defaultImport: this.options.messageExtensionName,\r\n                    moduleSpecifier: `./${this.options.messageExtensionName}`,\r\n                });\r\n                let hostimports = imports.filter(i => {\r\n                    return i.getModuleSpecifier().getLiteralText() == 'express-msteams-host';\r\n                });\r\n                if (hostimports.length >= 1) {\r\n                    let alreadyImported = hostimports.filter(i => {\r\n                        return i.getNamedImports().map(n => { return n.getText(); }).indexOf('MessageExtensionDeclaration') != -1;\r\n                    });\r\n                    if (alreadyImported.length == 0) {\r\n                        hostimports[0].addNamedImport(`MessageExtensionDeclaration`);\r\n                    }\r\n                }\r\n                else {\r\n                    const importDecl = file.insertImportDeclaration(pos, {\r\n                        namedImports: [`MessageExtensionDeclaration`],\r\n                        moduleSpecifier: `express-msteams-host`,\r\n                    });\r\n                }\r\n                if (cl) {\r\n                    // add the property\r\n                    const prop = cl.insertProperty(1, {\r\n                        scope: ts_simple_ast_1.Scope.Private,\r\n                        name: `${this.options.messageExtensionName}`,\r\n                        type: this.options.messageExtensionName,\r\n                        docs: [`Local property for ${this.options.messageExtensionName}`],\r\n                    });\r\n                    // add the decorator\r\n                    prop.addDecorator({\r\n                        name: 'MessageExtensionDeclaration',\r\n                        arguments: [`\"${this.options.messageExtensionName}\"`]\r\n                    });\r\n                    // hook up the logic in the constructor\r\n                    const constructors = cl.getConstructors();\r\n                    if (constructors.length > 0) {\r\n                        const c = constructors[0];\r\n                        let statements = c.getStatements().filter(s => {\r\n                            return s.getText() == 'super.registerMessageExtensions();';\r\n                        });\r\n                        if (statements.length == 1) {\r\n                            // insert the variable\r\n                            c.insertStatements(statements[0].getChildIndex(), `// Message extension ${this.options.messageExtensionName}\r\n                            this.${this.options.messageExtensionName} = new ${this.options.messageExtensionName}(this.universalBot);`);\r\n                        }\r\n                        else {\r\n                            // insert variable and registrations\r\n                            c.addStatements(`// Message extension ${this.options.messageExtensionName}\r\n                            this._${this.options.messageExtensionName} = new ${this.options.messageExtensionName}(this.universalBot);\r\n                            // Register all messge extensions\r\n                            super.registerMessageExtensions();`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // TODO: log\r\n                    }\r\n                }\r\n                else {\r\n                    // TODO: log\r\n                }\r\n                file.formatText();\r\n                this.fs.write(`src/app/${this.options.botName}.ts`, file.getFullText());\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.MessageExtensionGenerator = MessageExtensionGenerator;\r\n","\"use strict\";\r\n// Copyright (c) Wictor WilÃ©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst MessageExtensionGenerator_1 = require(\"./MessageExtensionGenerator\");\r\nmodule.exports = MessageExtensionGenerator_1.MessageExtensionGenerator;\r\n","module.exports = require(\"chalk\");","module.exports = require(\"dotenv\");","module.exports = require(\"guid\");","module.exports = require(\"lodash\");","module.exports = require(\"path\");","module.exports = require(\"ts-simple-ast\");","module.exports = require(\"typescript\");","module.exports = require(\"yeoman-generator\");","module.exports = require(\"yosay\");"],"sourceRoot":""}