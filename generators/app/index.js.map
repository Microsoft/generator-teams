{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/GeneratorTeamsApp.ts","webpack:///./src/app/GeneratorTeamsAppOptions.ts","webpack:///./src/app/Yotilities.ts","webpack:///./src/app/index.ts","webpack:///external \"applicationinsights\"","webpack:///external \"chalk\"","webpack:///external \"guid\"","webpack:///external \"lodash\"","webpack:///external \"path\"","webpack:///external \"typescript\"","webpack:///external \"yeoman-generator\"","webpack:///external \"yosay\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClFa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0CAAkB;AAC5C,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,cAAc,mBAAO,CAAC,oBAAO;AAC7B,mCAAmC,mBAAO,CAAC,yEAA4B;AACvE,qBAAqB,mBAAO,CAAC,6CAAc;AAC3C,oBAAoB,mBAAO,CAAC,gDAAqB;AACjD,YAAY,mBAAO,CAAC,oBAAO;AAC3B,WAAW,mBAAO,CAAC,kBAAM;AACzB,UAAU,mBAAO,CAAC,0CAAoB;AACtC,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0BAA0B;AAC5E;AACA;AACA;AACA;AACA,kGAAkG,YAAY;AAC9G,uCAAuC,0BAA0B;AACjE,uCAAuC,0BAA0B;AACjE,6CAA6C,0BAA0B;AACvE,6CAA6C,0BAA0B;AACvE,oDAAoD,0BAA0B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,0EAA0E;AACrK;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAuC;AAC7E,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,0BAA0B;AAChF;AACA,kDAAkD,wBAAwB;AAC1E;AACA,sDAAsD,cAAc;AACpE;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA,sDAAsD,2BAA2B;AACjF;AACA;AACA,sDAAsD,oBAAoB;AAC1E;AACA;AACA,sDAAsD,0BAA0B;AAChF;AACA;AACA,sDAAsD,oBAAoB;AAC1E;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzSa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,WAAW,mBAAO,CAAC,8BAAY;AAC/B,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,QAAQ;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,QAAQ;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,4BAA4B,mBAAO,CAAC,2DAAqB;AACzD;;;;;;;;;;;;;;;;;;;;;;;;ACNA,gD;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,6C;;;;;;;;;;;ACAA,kC","file":"app/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n// Copyright (c) Wictor Wil√©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Generator = require(\"yeoman-generator\");\r\nconst lodash = require(\"lodash\");\r\nconst chalk = require(\"chalk\");\r\nconst GeneratorTeamsAppOptions_1 = require(\"./GeneratorTeamsAppOptions\");\r\nconst Yotilities_1 = require(\"./Yotilities\");\r\nconst AppInsights = require(\"applicationinsights\");\r\nlet yosay = require('yosay');\r\nlet path = require('path');\r\nlet pkg = require('../../package.json');\r\nlet Guid = require('guid');\r\n/**\r\n * The main implementation for the `teams` generator\r\n */\r\nclass GeneratorTeamsApp extends Generator {\r\n    constructor(args, opts) {\r\n        super(args, (!(opts.force = true)) || opts);\r\n        this.options = new GeneratorTeamsAppOptions_1.GeneratorTeamsAppOptions();\r\n        opts.force = true;\r\n        this.desc('Generate a Microsoft Teams application.');\r\n        this.argument('solutionName', {\r\n            description: 'Solution name, as well as folder name',\r\n            required: false\r\n        });\r\n        this.option('skip-install', {\r\n            type: Boolean,\r\n            default: false,\r\n            description: 'Skips running npm install'\r\n        });\r\n        this.option('telemetry', {\r\n            type: Boolean,\r\n            default: false,\r\n            description: 'Does not pass usage telemetry'\r\n        });\r\n        if (this.options['no-telemetry']) {\r\n            AppInsights.setup('6d773b93-ff70-45c5-907c-8edae9bf90eb');\r\n            delete AppInsights.defaultClient.context.tags['ai.cloud.roleInstance'];\r\n            AppInsights.Configuration.setAutoCollectExceptions(true);\r\n            AppInsights.Configuration.setAutoCollectPerformance(true);\r\n            AppInsights.defaultClient.commonProperties = {\r\n                version: pkg.version\r\n            };\r\n            AppInsights.defaultClient.trackEvent({ name: 'start-generator' });\r\n        }\r\n        this.options.existingManifest = this.fs.readJSON(`./src/manifest/manifest.json`);\r\n    }\r\n    initializing() {\r\n        this.log(yosay('Welcome to the ' + chalk.default.yellow(`Microsoft Teams App generator (${pkg.version})`)));\r\n        this.composeWith('teams:tab', { 'options': this.options });\r\n        this.composeWith('teams:bot', { 'options': this.options });\r\n        this.composeWith('teams:custombot', { 'options': this.options });\r\n        this.composeWith('teams:connector', { 'options': this.options });\r\n        this.composeWith('teams:messageExtension', { 'options': this.options });\r\n        // check schema version:\r\n        if (this.options.existingManifest) {\r\n            if (this.options.existingManifest[\"$schema\"] != 'https://statics.teams.microsoft.com/sdk/v1.2/manifest/MicrosoftTeams.schema.json') {\r\n                this.log(chalk.default.red('You are running the generator on an already existing project, but on a non supported-schema.'));\r\n                process.exit(1);\r\n            }\r\n        }\r\n    }\r\n    prompting() {\r\n        return this.prompt([\r\n            {\r\n                type: 'confirm',\r\n                name: 'confirmedAdd',\r\n                default: false,\r\n                message: `You are running the generator on an already existing project, \"${this.options.existingManifest && this.options.existingManifest.name.short}\", are you sure you want to continue?`,\r\n                when: () => this.options.existingManifest,\r\n            },\r\n            {\r\n                type: 'input',\r\n                name: 'solutionName',\r\n                default: lodash.kebabCase(this.appname),\r\n                when: () => !(this.options.solutionName || this.options.existingManifest),\r\n                message: 'What is your solution name?'\r\n            },\r\n            {\r\n                type: 'list',\r\n                name: 'whichFolder',\r\n                default: 'current',\r\n                when: () => !(this.options.solutionName || this.options.existingManifest),\r\n                message: 'Where do you want to place the files?',\r\n                choices: [\r\n                    {\r\n                        name: 'Use the current folder',\r\n                        value: 'current'\r\n                    },\r\n                    {\r\n                        name: 'Create a subfolder with solution name',\r\n                        value: 'subdir'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'input',\r\n                name: 'name',\r\n                message: 'Title of your Microsoft Teams App project?',\r\n                when: () => !this.options.existingManifest,\r\n                default: this.appname\r\n            },\r\n            {\r\n                type: 'input',\r\n                name: 'developer',\r\n                message: 'Your (company) name? (max 32 characters)',\r\n                default: this.user.git.name,\r\n                validate: (input) => {\r\n                    return input.length > 0 && input.length <= 32;\r\n                },\r\n                when: () => !this.options.existingManifest,\r\n                store: true\r\n            },\r\n            {\r\n                type: 'checkbox',\r\n                message: 'What do you want to add to your project?',\r\n                name: 'parts',\r\n                choices: [\r\n                    {\r\n                        name: 'A Tab',\r\n                        value: 'tab',\r\n                        disabled: this.options.existingManifest,\r\n                        checked: true\r\n                    },\r\n                    {\r\n                        name: 'A Bot',\r\n                        disabled: this.options.existingManifest,\r\n                        value: 'bot'\r\n                    },\r\n                    {\r\n                        name: 'An Outgoing Webhook',\r\n                        disabled: this.options.existingManifest,\r\n                        value: 'custombot'\r\n                    },\r\n                    {\r\n                        name: 'A Connector',\r\n                        disabled: this.options.existingManifest,\r\n                        value: 'connector'\r\n                    },\r\n                    {\r\n                        name: 'A Message Extension',\r\n                        value: 'messageextension',\r\n                    }\r\n                ],\r\n                when: (answers) => answers.confirmedAdd != false\r\n            },\r\n            {\r\n                type: 'input',\r\n                name: 'host',\r\n                message: 'The URL where you will host this solution?',\r\n                default: (answers) => {\r\n                    return `https://${lodash.camelCase(answers.solutionName)}.azurewebsites.net`;\r\n                },\r\n                validate: Yotilities_1.Yotilities.validateUrl,\r\n                when: () => !this.options.existingManifest,\r\n            },\r\n        ]).then((answers) => {\r\n            if (answers.confirmedAdd == false) {\r\n                process.exit(0);\r\n            }\r\n            if (!this.options.existingManifest) {\r\n                answers.host = answers.host.endsWith('/') ? answers.host.substr(0, answers.host.length - 1) : answers.host;\r\n                this.options.title = answers.name;\r\n                this.options.description = this.description;\r\n                this.options.solutionName = this.options.solutionName || answers.solutionName;\r\n                this.options.shouldUseSubDir = answers.whichFolder === 'subdir';\r\n                this.options.libraryName = lodash.camelCase(this.options.solutionName);\r\n                this.options.packageName = this.options.libraryName.toLocaleLowerCase();\r\n                this.options.developer = answers.developer;\r\n                this.options.host = answers.host;\r\n                var tmp = this.options.host.substring(this.options.host.indexOf('://') + 3);\r\n                var arr = tmp.split('.');\r\n                this.options.namespace = lodash.reverse(arr).join('.');\r\n                this.options.tou = answers.host + '/tou.html';\r\n                this.options.privacy = answers.host + '/privacy.html';\r\n                this.options.id = Guid.raw();\r\n                if (this.options.host.indexOf('azurewebsites.net') >= 0) {\r\n                    this.options.websitePrefix = this.options.host.substring(this.options.host.indexOf('://') + 3, this.options.host.indexOf('.'));\r\n                }\r\n                else {\r\n                    this.options.websitePrefix = '[your Azure web app name]';\r\n                }\r\n                if (this.options.shouldUseSubDir) {\r\n                    this.destinationRoot(this.destinationPath(this.options.solutionName));\r\n                }\r\n            }\r\n            else {\r\n                this.options.developer = this.options.existingManifest.developer.name;\r\n                this.options.title = this.options.existingManifest.name.short;\r\n                let pkg = this.fs.readJSON(`./package.json`);\r\n                this.options.libraryName = pkg.name;\r\n                this.options.host = this.options.existingManifest.developer.websiteUrl;\r\n            }\r\n            this.options.bot = answers.parts.indexOf('bot') != -1;\r\n            this.options.tab = answers.parts.indexOf('tab') != -1;\r\n            this.options.connector = answers.parts.indexOf('connector') != -1;\r\n            this.options.customBot = answers.parts.indexOf('custombot') != -1;\r\n            this.options.messageExtension = answers.parts.indexOf('messageextension') != -1;\r\n            this.options.reactComponents = false; // set to false initially\r\n        });\r\n    }\r\n    configuring() {\r\n    }\r\n    default() {\r\n    }\r\n    writing() {\r\n        if (!this.options.existingManifest) {\r\n            let staticFiles = [\r\n                \"_gitignore\",\r\n                \"tsconfig.json\",\r\n                \"tslint.json\",\r\n                \"tsconfig-client.json\",\r\n                \"src/manifest/icon-outline.png\",\r\n                \"src/manifest/icon-color.png\",\r\n                \"src/app/web/assets/icon.png\",\r\n                'deploy.cmd',\r\n                '_deployment',\r\n                \"src/app/TeamsAppsComponents.ts\"\r\n            ];\r\n            let templateFiles = [\r\n                \"README.md\",\r\n                \"gulpfile.js\",\r\n                \"package.json\",\r\n                \".env\",\r\n                'src/app/server.ts',\r\n                \"src/manifest/manifest.json\",\r\n                \"webpack.config.js\",\r\n                \"src/app/scripts/client.ts\",\r\n                \"src/app/web/index.html\",\r\n                \"src/app/web/tou.html\",\r\n                \"src/app/web/privacy.html\",\r\n            ];\r\n            this.sourceRoot();\r\n            templateFiles.forEach(t => {\r\n                this.fs.copyTpl(this.templatePath(t), Yotilities_1.Yotilities.fixFileNames(t, this.options), this.options);\r\n            });\r\n            staticFiles.forEach(t => {\r\n                this.fs.copy(this.templatePath(t), Yotilities_1.Yotilities.fixFileNames(t, this.options));\r\n            });\r\n            // if we have added any react based components\r\n            if (this.options.reactComponents) {\r\n                Yotilities_1.Yotilities.addAdditionalDeps([\r\n                    [\"msteams-react-base-component\", \"~1.0.0\"]\r\n                ], this.fs);\r\n            }\r\n        }\r\n    }\r\n    conflicts() {\r\n    }\r\n    install() {\r\n        // track usage\r\n        if (this.options['no-telemetry']) {\r\n            if (this.options.existingManifest) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'rerun-generator' });\r\n            }\r\n            AppInsights.defaultClient.trackEvent({ name: 'end-generator' });\r\n            if (this.options.bot) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'bot' });\r\n                if (this.options.botType == 'existing') {\r\n                    AppInsights.defaultClient.trackEvent({ name: 'bot-existing' });\r\n                }\r\n                else {\r\n                    AppInsights.defaultClient.trackEvent({ name: 'bot-new' });\r\n                }\r\n            }\r\n            if (this.options.messageExtension) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'messageExtension' });\r\n            }\r\n            if (this.options.connector) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'connector' });\r\n            }\r\n            if (this.options.customBot) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'outgoingWebhook' });\r\n            }\r\n            if (this.options.staticTab) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'staticTab' });\r\n            }\r\n            if (this.options.tab) {\r\n                AppInsights.defaultClient.trackEvent({ name: 'tab' });\r\n            }\r\n            AppInsights.defaultClient.flush();\r\n        }\r\n        if (this.options['skip-install']) {\r\n            this.log(chalk.default.yellow('Skipping installation of dependencies. You should run \"npm install\"'));\r\n        }\r\n        else {\r\n            this.npmInstall();\r\n        }\r\n    }\r\n    end() {\r\n        this.log(chalk.default.yellow('Thanks for using the generator!'));\r\n        this.log(chalk.default.yellow('Have fun and make great Microsoft Teams Apps...'));\r\n    }\r\n}\r\nexports.GeneratorTeamsApp = GeneratorTeamsApp;\r\n","\"use strict\";\r\n// Copyright (c) Wictor Wil√©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Configuration options for the generator\r\n */\r\nclass GeneratorTeamsAppOptions {\r\n    constructor() {\r\n        /* Bots */\r\n        this.botid = '';\r\n        this.botType = \"\";\r\n        this.connectorType = '';\r\n        this.messageExtensionType = '';\r\n    }\r\n}\r\nexports.GeneratorTeamsAppOptions = GeneratorTeamsAppOptions;\r\n","\"use strict\";\r\n// Copyright (c) Wictor Wil√©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ts = require(\"typescript\");\r\nlet path = require('path');\r\nconst packagePath = \"package.json\";\r\n/**\r\n * Utility class for the Generator\r\n */\r\nclass Yotilities {\r\n    /**\r\n     * Validates a URL\r\n     * @param url Url to validate\r\n     */\r\n    static validateUrl(url) {\r\n        return /(https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/.test(url);\r\n    }\r\n    /**\r\n     * Renames a file based on passed options\r\n     * @param filename path and name to file\r\n     * @param options object with replacement properties\r\n     */\r\n    static fixFileNames(filename, options) {\r\n        if (filename !== undefined) {\r\n            var basename = path.basename(filename);\r\n            if (basename[0] === '_') {\r\n                var filename = '.' + basename.substr(1);\r\n                var dirname = path.dirname(filename);\r\n                filename = path.join(dirname, filename);\r\n            }\r\n            for (var prop in options) {\r\n                if (options.hasOwnProperty(prop) && typeof options[prop] === 'string') {\r\n                    filename = filename.replace(new RegExp(\"{\" + prop + \"}\", 'g'), options[prop]);\r\n                }\r\n            }\r\n        }\r\n        return filename;\r\n    }\r\n    static addAdditionalDeps(dependencies, fs) {\r\n        var pkg = fs.readJSON(packagePath);\r\n        dependencies.forEach(dep => {\r\n            pkg.dependencies[dep[0]] = dep[1];\r\n        });\r\n        fs.writeJSON(packagePath, pkg);\r\n    }\r\n    static insertTsExportDeclaration(fileName, literal, comment, fs) {\r\n        let clientTs = fs.read(fileName);\r\n        const src = ts.createSourceFile(fileName, clientTs, ts.ScriptTarget.ES5, true, ts.ScriptKind.TS);\r\n        const exp = ts.createExportDeclaration(undefined, undefined, undefined, ts.createLiteral(literal));\r\n        if (comment !== undefined) {\r\n            const cmt = ts.addSyntheticLeadingComment(exp, ts.SyntaxKind.SingleLineCommentTrivia, ` ${comment}`);\r\n        }\r\n        const update = ts.updateSourceFileNode(src, [\r\n            ...src.statements,\r\n            exp\r\n        ]);\r\n        const printer = ts.createPrinter({\r\n            newLine: ts.NewLineKind.LineFeed,\r\n            removeComments: false,\r\n        });\r\n        fs.write(fileName, printer.printFile(update));\r\n    }\r\n    static insertImportDeclaration(fileName, identifier, literal, comment, fs) {\r\n        let clientTs = fs.read(fileName);\r\n        const src = ts.createSourceFile(fileName, clientTs, ts.ScriptTarget.ES5, true, ts.ScriptKind.TS);\r\n        const imp = ts.createImportDeclaration(undefined, undefined, ts.createImportClause(ts.createIdentifier(identifier), undefined), ts.createLiteral(literal));\r\n        if (comment !== undefined) {\r\n            const cmt = ts.addSyntheticLeadingComment(imp, ts.SyntaxKind.SingleLineCommentTrivia, ` ${comment}`);\r\n        }\r\n        const update = ts.updateSourceFileNode(src, [\r\n            imp,\r\n            ...src.statements\r\n        ]);\r\n        const printer = ts.createPrinter({\r\n            newLine: ts.NewLineKind.LineFeed,\r\n            removeComments: false,\r\n        });\r\n        fs.write(fileName, printer.printFile(update));\r\n    }\r\n}\r\nexports.Yotilities = Yotilities;\r\n","\"use strict\";\r\n// Copyright (c) Wictor Wil√©n. All rights reserved. \r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GeneratorTeamsApp_1 = require(\"./GeneratorTeamsApp\");\r\nmodule.exports = GeneratorTeamsApp_1.GeneratorTeamsApp;\r\n","module.exports = require(\"applicationinsights\");","module.exports = require(\"chalk\");","module.exports = require(\"guid\");","module.exports = require(\"lodash\");","module.exports = require(\"path\");","module.exports = require(\"typescript\");","module.exports = require(\"yeoman-generator\");","module.exports = require(\"yosay\");"],"sourceRoot":""}